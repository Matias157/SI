% JOGO DE AVENTURA - FUN WITH PROLOG
% O objetivo eh pegar um ovo do local onde ficam os patos sem que as
% raposas peguem patos.
%
% Para iniciar o jogo tecle go.
% comandos permitidos:
% >> goto(yard)
% >> goto(house)
% >> goto(duck_pen)
%
% EXERCICIO 1: observe que ao executar o jogo pela 2a. vez ele jah
% entrara no estado final. Os objetos se encontram num estado que
% satisfaz o predicado done. Faca um 'procedimento' de reinicializacao
% de forma que ao final do jogo os objetos retornem ao estado inicial.
%
% EXERCICIO 2: transforme o predicado connect em uma relacao reflexiva e
% simetrica de forma que so seja necessario indicar as conexoes em um
% sentido por meio do predicado connect(X,Y).
%
% EXERCICIO 3: faca com que a raposa ande aleatoriamente no jogo. Inclua
% um contador para saber quantos patos a raposa comeu.
%

% indica predicados que serao modificados em tempo de execucao.
:- dynamic you_have/1, location/2.

% localizacao dos elementos do jogo

location(egg, duck_pen).
location(ducks, duck_pen).
location(fox, woods).
location(you, house).

connect(yard, duck_pen).
connect(duck_pen, yard).
connect(yard, house).
connect(house, yard).
connect(yard, woods).
connect(woods, yard).

% comandos de movimentacao
goto(X) :- location(you, L),
	connect(L, X),
	retract(location(you, L)),
	assert(location(you, X)),
	write("Your are in the "), writeln(X).

goto(X) :- write("You cant get"), write(X), writeln("from here").

% demons
fox :-	location(ducks, yard),
	location(you, house),
	writeln("The fox has taken a duck").
fox.

take_the_egg :- location(you, duck_pen),
	assert(you_have(egg)),
	write("You've just taken the egg"), nl.

take_the_egg.

% loop de controle principal
go :- done.
go :- write(">> "),
	read(X),
	call(X),
	fox,
	take_the_egg,
	go.

done :- location(you, house),
	you_have(egg),
	write("Thanks for getting the egg"), nl.


















